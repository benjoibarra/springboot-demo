The Spring Framework is a powerful, open-source framework for building Java applications.
It provides a wide range of tools and features to simplify enterprise application development

Spring Boot is an extension of the Spring Framework that makes it easier and faster to build Java applications by
providing pre-configured setups, so you don't have to manually configure everything.

Spring Boot is considered "opinionated" because it comes with default configurations and conventions that simplify
application setup, based on common patterns and best practices. These defaults help developers get started quickly,
reducing the need for manual configuration, but still allow flexibility to override them if needed.

Think of Spring as a custom-built car:

You get all the parts (engine, wheels, chassis) and a manual.
You have the flexibility to assemble it exactly how you want, but it takes time and expertise.
You need to decide everything, like which engine to use, how to wire the electronics, and which tires to install.
Now, imagine Spring Boot as a pre-configured car:

It comes fully built with an engine, wheels, and all the essentials pre-installed.
It assumes sensible defaults based on typical needs (e.g., automatic transmission, power steering).
You can still customize it (change the color, upgrade the tires), but you don’t have to worry about basic setup—it just works out of the box.


Lets first create our springboot project, for that we will go to spring initializer website

Gradle & Maven: build automation tool that manages dependencies, and various tasks that are used for software development

gradle - boiler plate files used by gradle
idea - files used by IDE

main focus:
1. src
2. build.gradle

build.gradle - script used to define: plugins, dependencies, tasks and other configuration needed to build and run the application
src - folder that contains main (main code) and test (test code) folders


DemoApplication - is the main entry point of our Springboot application
@SpringBootApplication - Convenience annotation that combines @SpringBootConfiguration, @EnableAutoConfiguration, @ComponentScan
@SpringBootConfiguration - classes annotated with this can define beans using @Bean
@EnableAutoConfiguration - automatically configure beans based on: depdendencies and properties file
For example:
If you include spring-boot-starter-web, it automatically configures a web server (e.g., Tomcat).
If you include spring-boot-starter-data-jpa, it configures Hibernate and a DataSource.
@ComponentScan - Enables component scanning for Spring components (e.g., @Component, @Service, @Repository, @Controller) in the package where the class resides and its sub-packages


Main ways to create beans:
1. @Configuration + @Bean (BeanConfiguration.class, Human.class)
2. @Component (Pet.class)

Main ways to inject beans:
1. Field Injection
2. Constructor Injection
3. Setter Injection

When multiple beans are found with the same interface, use:
1. @Primary
2. Put nicknames for @Bean("xxx") or @Component("xxx") and add @Qualifier("xxx") when autowiring
 - @Component qualifiers are set by default, @Bean qualifiers are not set by default


Project architecture:
1. Controller - Manages HTTP traffic (request and response)
2. Service - Business logic
3. Repository - Database interaction, external system


