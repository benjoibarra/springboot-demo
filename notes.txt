Hello and welcome to our first-ever TekTok session!
I’m excited to kick off this weekly technology brownbag series, where I’ll be sharing insights on various tech topics.
I hope you find these sessions both informative and engaging. Let’s get started, and today’s topic is Spring Boot!


Plumbing:
are the essential but non-business-critical infrastructure that the framework provides out-of-the-box.
This includes things like dependency injection, transaction management, data access, security, and messaging.
Which are traditionally done manually by developers, which takes a lot of time and effort...

Essentially, Spring framework does most of the dirty work and the heavy work for you so you can focus on more important things
like building your application...

Spring Boot is an extension of the Spring Framework that makes it easier and faster to build Java applications by
providing pre-configured setups, so you don't have to manually configure everything.

Spring Boot is considered "opinionated" because it comes with default configurations and conventions that simplify
application setup, based on common patterns and best practices. These defaults help developers get started quickly,
reducing the need for manual configuration, but still allow flexibility to override them if needed.

Think of Spring as a custom-built car:

You get all the parts (engine, wheels, chassis) and a manual.
You have the flexibility to assemble it exactly how you want, but it takes time and expertise.
You need to decide everything, like which engine to use, how to wire the electronics, and which tires to install.
Now, imagine Spring Boot as a pre-configured car:

It comes fully built with an engine, wheels, and all the essentials pre-installed.
It assumes sensible defaults based on typical needs (e.g., automatic transmission, power steering).
You can still customize it (change the color, upgrade the tires), but you don’t have to worry about basic setup—it just works out of the box.


Lets first create our springboot project, for that we will go to spring initializer website

Gradle & Maven: are both build automation tools used in software development to manage dependencies, compile code, run tests, create packages,
and handle other aspects of the build lifecycle. They both help in automating the repetitive tasks associated with building, testing, and deploying software.

gradle - boiler plate files used by gradle
idea - files used by IDE

main focus:
1. src
2. build.gradle

build.gradle - script used to define: plugins, dependencies, tasks and other configuration needed to build and run the application
src - folder that contains main (main code) and test (test code) folders


DemoApplication - is the main entry point of our Springboot application

The SpringApplication.run() method starts the Spring Boot application.
It initializes the Spring ApplicationContext, which is the core container for all Spring-managed beans.

Managing Beans: Creates, configures, and manages the lifecycle of beans (objects annotated with @Component, @Service, etc.).
Dependency Injection: Resolves and injects dependencies between beans automatically.


@SpringBootApplication - Convenience annotation that combines @SpringBootConfiguration, @EnableAutoConfiguration, @ComponentScan
@SpringBootConfiguration - classes annotated with this can define beans using @Bean
@EnableAutoConfiguration - automatically configure beans based on: depdendencies and properties file
For example:
If you include spring-boot-starter-web, it automatically configures a web server (e.g., Tomcat).
If you include spring-boot-starter-data-jpa, it configures Hibernate and a DataSource.
@ComponentScan - Enables component scanning for Spring components (e.g., @Component, @Service, @Repository, @Controller) in the package where the class resides and its sub-packages


Main ways to create beans:
1. @Configuration + @Bean (BeanConfiguration.class, Human.class)
2. @Component (Pet.class)

Main ways to inject beans:
1. Field Injection
2. Constructor Injection
3. Setter Injection

When multiple beans are found with the same interface, use:
1. @Primary
2. Put nicknames for @Bean("xxx") or @Component("xxx") and add @Qualifier("xxx") when autowiring
 - @Component qualifiers are set by default, @Bean qualifiers are not set by default


Project architecture:
1. Controller - Manages HTTP traffic (request and response)
2. Service - Business logic
3. Repository - Database interaction, external system

@Entity - Used to mark a Java class as a persistent entity that maps to a database table

==================================================================
JPA (Java Persistence API) - is a specification in Java that provides a set of guidelines for managing relational data in Java applications.
With JPA, you can:

Map Java objects to database tables: JPA uses annotations to map Java classes to database tables and their properties to table columns.
This is called object-relational mapping (ORM).

Handle CRUD operations: JPA simplifies Create, Read, Update, and Delete operations, reducing the need for boilerplate SQL code.

Query database using JPQL (Java Persistence Query Language): JPQL is similar to SQL but operates on entities rather than database tables, allowing for more object-oriented querying.

Manage entity relationships: JPA makes it easy to define relationships between entities such as One-to-One, One-to-Many, and Many-to-Many.

Automatic persistence management: JPA provides an EntityManager to handle transactions, persist data, and query the database.


>>> JPA is a Specification, Hibernate is an Implementation
 - JPA (Java Persistence API)
is a specification that defines a standard set of rules, guidelines, and APIs for object-relational mapping (ORM) in Java.
It provides an abstraction layer for dealing with relational databases using Java objects (entities).

 - Hibernate is a framework that provides an implementation of the JPA specification,
 along with additional features beyond JPA. In other words, Hibernate is a JPA provider,
 meaning it adheres to the JPA standard but also adds its own proprietary features that extend beyond the specification.


Flexibility: By depending on an interface rather than a concrete class, you decouple your classes.
This means that your code doesn't directly rely on a specific implementation,
making it easier to change implementations without modifying the dependent class.

Ease of replacement: You can swap out the implementation of an interface without changing the classes that depend on it.
This is particularly useful when switching to a new implementation or mocking implementations in unit tests.